// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// las
IntegerMatrix las(const ListOf< IntegerMatrix >& M, std::string rule, double threshold, bool self);
RcppExport SEXP _similR_las(SEXP MSEXP, SEXP ruleSEXP, SEXP thresholdSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const ListOf< IntegerMatrix >& >::type M(MSEXP);
    Rcpp::traits::input_parameter< std::string >::type rule(ruleSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< bool >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(las(M, rule, threshold, self));
    return rcpp_result_gen;
END_RCPP
}
// contingency_matrix
IntegerMatrix contingency_matrix(const IntegerMatrix& M1, const IntegerMatrix& M2, bool include_diagonal, const std::vector< int >& exclude);
RcppExport SEXP _similR_contingency_matrix(SEXP M1SEXP, SEXP M2SEXP, SEXP include_diagonalSEXP, SEXP excludeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type M1(M1SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type M2(M2SEXP);
    Rcpp::traits::input_parameter< bool >::type include_diagonal(include_diagonalSEXP);
    Rcpp::traits::input_parameter< const std::vector< int >& >::type exclude(excludeSEXP);
    rcpp_result_gen = Rcpp::wrap(contingency_matrix(M1, M2, include_diagonal, exclude));
    return rcpp_result_gen;
END_RCPP
}
// reduce_dim
IntegerMatrix reduce_dim(IntegerMatrix& x, int k);
RcppExport SEXP _similR_reduce_dim(SEXP xSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_dim(x, k));
    return rcpp_result_gen;
END_RCPP
}
// similarity
NumericMatrix similarity(const ListOf<IntegerMatrix>& M, const std::vector< std::string >& statistic, bool normalized, bool firstonly, bool include_diagonal, bool exclude_j);
RcppExport SEXP _similR_similarity(SEXP MSEXP, SEXP statisticSEXP, SEXP normalizedSEXP, SEXP firstonlySEXP, SEXP include_diagonalSEXP, SEXP exclude_jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const ListOf<IntegerMatrix>& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const std::vector< std::string >& >::type statistic(statisticSEXP);
    Rcpp::traits::input_parameter< bool >::type normalized(normalizedSEXP);
    Rcpp::traits::input_parameter< bool >::type firstonly(firstonlySEXP);
    Rcpp::traits::input_parameter< bool >::type include_diagonal(include_diagonalSEXP);
    Rcpp::traits::input_parameter< bool >::type exclude_j(exclude_jSEXP);
    rcpp_result_gen = Rcpp::wrap(similarity(M, statistic, normalized, firstonly, include_diagonal, exclude_j));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_similR_las", (DL_FUNC) &_similR_las, 4},
    {"_similR_contingency_matrix", (DL_FUNC) &_similR_contingency_matrix, 4},
    {"_similR_reduce_dim", (DL_FUNC) &_similR_reduce_dim, 2},
    {"_similR_similarity", (DL_FUNC) &_similR_similarity, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_similR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
